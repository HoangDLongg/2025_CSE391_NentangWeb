document.addEventListener('DOMContentLoaded', function() {
    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM
    const addButton = document.querySelector('.add-button');
    const modal = document.getElementById('Addhoadon');
    const closeBtn = document.querySelector('.close');
    const cancelBtn = document.getElementById('cancelAdd');
    const addForm = document.getElementById('themhoadon');
    const tableBody = document.querySelector('tbody');

    // Bi·∫øn ƒë·ªÉ t·∫°o ID t·ª± ƒë·ªông
    let nextId = 1680;

    // M·ªü modal khi nh·∫•n n√∫t TH√äM
    addButton.addEventListener('click', function() {
        modal.style.display = 'block';
        // Focus v√†o tr∆∞·ªùng ƒë·∫ßu ti√™n
        setTimeout(() => {
            document.getElementById('khachhang').focus();
        }, 100);
    });

    // ƒê√≥ng modal khi nh·∫•n n√∫t X
    closeBtn.addEventListener('click', function() {
        modal.style.display = 'none';
        addForm.reset();
    });

    // ƒê√≥ng modal khi nh·∫•n n√∫t H·ªßy
    cancelBtn.addEventListener('click', function() {
        modal.style.display = 'none';
        addForm.reset();
    });

    // ƒê√≥ng modal khi click b√™n ngo√†i
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            addForm.reset();
        }
    });

    // X·ª≠ l√Ω submit form
    addForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        const khachHang = document.getElementById('khachhang').value.trim();
        const nhanVien = document.getElementById('nhanvien').value.trim();
        const soTien = document.getElementById('sotien').value.trim();

        // Validation
        if (!khachHang || !nhanVien || !soTien) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
            return;
        }

        // Ki·ªÉm tra s·ªë ti·ªÅn c√≥ ph·∫£i l√† s·ªë kh√¥ng
        const soTienNumber = parseFloat(soTien.replace(/[.,]/g, ''));
        if (isNaN(soTienNumber) || soTienNumber <= 0) {
            alert('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!');
            return;
        }

        // Th√™m giao d·ªãch m·ªõi v√†o b·∫£ng
        addTransactionToTable(khachHang, nhanVien, soTienNumber);
        
        // ƒê√≥ng modal v√† reset form
        modal.style.display = 'none';
        addForm.reset();
        
        alert('ƒê√£ th√™m giao d·ªãch th√†nh c√¥ng!');
    });

    // Function th√™m giao d·ªãch v√†o b·∫£ng
    function addTransactionToTable(khachHang, nhanVien, soTien) {
        const newRow = document.createElement('tr');
        
        // T·∫°o ng√†y gi·ªù hi·ªán t·∫°i
        const now = new Date();
        const ngayMua = formatDate(now);
        
        // Format s·ªë ti·ªÅn
        const soTienFormatted = formatMoney(soTien);
        
        newRow.innerHTML = `
            <td class="checkbox-cell">
                <input type="checkbox">
            </td>
            <td>
                <div class="actions-cell">
                    <button class="action-btn view-btn" title="Xem">üëÅ</button>
                    <button class="action-btn edit-btn" title="S·ª≠a">‚úè</button>
                    <button class="action-btn delete-btn" title="X√≥a" onclick="deleteRow(this)">üóë</button>
                </div>
            </td>
            <td>${nextId}</td>
            <td>${khachHang}</td>
            <td>${nhanVien}</td>
            <td class="money">${soTienFormatted}</td>
            <td>${ngayMua}</td>
        `;
        
        // Th√™m animation khi th√™m row m·ªõi
        newRow.style.opacity = '0';
        newRow.style.transform = 'translateY(-20px)';
        
        tableBody.appendChild(newRow);
        
        // Animation fade in
        setTimeout(() => {
            newRow.style.transition = 'all 0.5s ease';
            newRow.style.opacity = '1';
            newRow.style.transform = 'translateY(0)';
        }, 100);
        
        nextId++;
    }

    // Function format ng√†y th√°ng
    function formatDate(date) {
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        
        const monthNames = [
            'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
            'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'
        ];
        
        return `${day} ${monthNames[date.getMonth()]} ${year} ${hours}:${minutes}`;
    }

    // Function format s·ªë ti·ªÅn
    function formatMoney(amount) {
        return new Intl.NumberFormat('vi-VN').format(amount);
    }

    // Function x·ª≠ l√Ω checkbox "Select All"
    const selectAllCheckbox = document.getElementById('selectAll');
    selectAllCheckbox.addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('tbody input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const row = checkbox.closest('tr');
            if (this.checked) {
                row.classList.add('selected-row');
            } else {
                row.classList.remove('selected-row');
            }
        });
    });

    // Function x·ª≠ l√Ω checkbox c·ªßa t·ª´ng h√†ng
    document.addEventListener('change', function(event) {
        if (event.target.type === 'checkbox' && event.target !== selectAllCheckbox) {
            const row = event.target.closest('tr');
            if (event.target.checked) {
                row.classList.add('selected-row');
            } else {
                row.classList.remove('selected-row');
            }
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i select all
            const allCheckboxes = document.querySelectorAll('tbody input[type="checkbox"]');
            const checkedCheckboxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
            selectAllCheckbox.checked = allCheckboxes.length === checkedCheckboxes.length;
        }
    });

    // Function x·ª≠ l√Ω n√∫t "Delete Selected"
    const deleteSelectedBtn = document.querySelector('.delete-selected');
    deleteSelectedBtn.addEventListener('click', function() {
        const selectedCheckboxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
        
        if (selectedCheckboxes.length === 0) {
            alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b·∫£n ghi ƒë·ªÉ x√≥a!');
            return;
        }
        
        if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ${selectedCheckboxes.length} b·∫£n ghi ƒë√£ ch·ªçn?`)) {
            selectedCheckboxes.forEach(checkbox => {
                const row = checkbox.closest('tr');
                row.style.transition = 'all 0.3s ease';
                row.style.opacity = '0';
                row.style.transform = 'translateX(-100%)';
                
                setTimeout(() => {
                    row.remove();
                }, 300);
            });
            
            // Reset select all checkbox
            selectAllCheckbox.checked = false;
            
            setTimeout(() => {
                alert('ƒê√£ x√≥a c√°c b·∫£n ghi ƒë√£ ch·ªçn!');
            }, 350);
        }
    });
});

// Function x√≥a t·ª´ng h√†ng (ƒë∆∞·ª£c g·ªçi t·ª´ n√∫t delete c·ªßa t·ª´ng h√†ng)
function deleteRow(button) {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giao d·ªãch n√†y?')) {
        const row = button.closest('tr');
        row.style.transition = 'all 0.3s ease';
        row.style.opacity = '0';
        row.style.transform = 'translateX(-100%)';
        
        setTimeout(() => {
            row.remove();
            alert('ƒê√£ x√≥a giao d·ªãch!');
        }, 300);
    }
}
