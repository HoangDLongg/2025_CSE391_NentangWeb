$(document).ready(function() {
    // Bi·∫øn ƒë·ªÉ t·∫°o ID t·ª± ƒë·ªông
    let nextId = 1680;

    // Kh·ªüi t·∫°o jQuery Validate cho form
    $("#themhoadon").validate({
        rules: {
            khachhang: {
                required: true,
                minlength: 2,
                maxlength: 50
            },
            nhanvien: {
                required: true,
                minlength: 2,
                maxlength: 50
            },
            sotien: {
                required: true,
                min: 1000,
                max: 999999999,
                number: true
            }
        },
        messages: {
            khachhang: {
                required: "Vui l√≤ng nh·∫≠p t√™n kh√°ch h√†ng",
                minlength: "T√™n kh√°ch h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±",
                maxlength: "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±"
            },
            nhanvien: {
                required: "Vui l√≤ng nh·∫≠p t√™n nh√¢n vi√™n",
                minlength: "T√™n nh√¢n vi√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±",
                maxlength: "T√™n nh√¢n vi√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±"
            },
            sotien: {
                required: "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn",
                min: "S·ªë ti·ªÅn ph·∫£i √≠t nh·∫•t 1.000 VNƒê",
                max: "S·ªë ti·ªÅn kh√¥ng ƒë∆∞·ª£c qu√° 999.999.999 VNƒê",
                number: "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá"
            }
        },
        errorElement: "div",
        errorClass: "error-message",
        highlight: function(element) {
            $(element).addClass("error-input");
        },
        unhighlight: function(element) {
            $(element).removeClass("error-input");
        },
        submitHandler: function(form) {
            // L·∫•y d·ªØ li·ªáu t·ª´ form
            const khachHang = $("#khachhang").val().trim();
            const nhanVien = $("#nhanvien").val().trim();
            const soTien = parseFloat($("#sotien").val());

            // Th√™m giao d·ªãch m·ªõi v√†o b·∫£ng
            addTransactionToTable(khachHang, nhanVien, soTien);
            
            // ƒê√≥ng modal v√† reset form
            $("#Addhoadon").hide();
            $("#themhoadon")[0].reset();
            
            alert('ƒê√£ th√™m giao d·ªãch th√†nh c√¥ng!');
        }
    });

    // M·ªü modal khi nh·∫•n n√∫t TH√äM
    $(".add-button").on('click', function() {
        $("#Addhoadon").show();
        // Focus v√†o tr∆∞·ªùng ƒë·∫ßu ti√™n
        setTimeout(() => {
            $("#khachhang").focus();
        }, 100);
    });

    // ƒê√≥ng modal khi nh·∫•n n√∫t X
    $(".close").on('click', function() {
        $("#Addhoadon").hide();
        $("#themhoadon")[0].reset();
        // X√≥a c√°c l·ªói validation
        $("#themhoadon").validate().resetForm();
        $(".error-input").removeClass("error-input");
    });

    // ƒê√≥ng modal khi nh·∫•n n√∫t H·ªßy
    $("#cancelAdd").on('click', function() {
        $("#Addhoadon").hide();
        $("#themhoadon")[0].reset();
        // X√≥a c√°c l·ªói validation
        $("#themhoadon").validate().resetForm();
        $(".error-input").removeClass("error-input");
    });

    // ƒê√≥ng modal khi click b√™n ngo√†i
    $(window).on('click', function(event) {
        if ($(event.target).is("#Addhoadon")) {
            $("#Addhoadon").hide();
            $("#themhoadon")[0].reset();
            // X√≥a c√°c l·ªói validation
            $("#themhoadon").validate().resetForm();
            $(".error-input").removeClass("error-input");
        }
    });

    // Function th√™m giao d·ªãch v√†o b·∫£ng
    function addTransactionToTable(khachHang, nhanVien, soTien) {
        // T·∫°o ng√†y gi·ªù hi·ªán t·∫°i
        const now = new Date();
        const ngayMua = formatDate(now);
        
        // Format s·ªë ti·ªÅn
        const soTienFormatted = formatMoney(soTien);
        
        const newRowHtml = `
            <tr style="opacity: 0; transform: translateY(-20px);">
                <td class="checkbox-cell">
                    <input type="checkbox">
                </td>
                <td>
                    <div class="actions-cell">
                        <button class="action-btn view-btn" title="Xem">üëÅ</button>
                        <button class="action-btn edit-btn" title="S·ª≠a">‚úè</button>
                        <button class="action-btn delete-btn" title="X√≥a">üóë</button>
                    </div>
                </td>
                <td>${nextId}</td>
                <td>${khachHang}</td>
                <td>${nhanVien}</td>
                <td class="money">${soTienFormatted}</td>
                <td>${ngayMua}</td>
            </tr>
        `;
        
        const $newRow = $(newRowHtml);
        $("tbody").append($newRow);
        
        // Animation fade in
        setTimeout(() => {
            $newRow.css({
                'transition': 'all 0.5s ease',
                'opacity': '1',
                'transform': 'translateY(0)'
            });
        }, 100);
        
        nextId++;
    }

    // Function format ng√†y th√°ng
    function formatDate(date) {
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        
        const monthNames = [
            'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
            'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'
        ];
        
        return `${day} ${monthNames[date.getMonth()]} ${year} ${hours}:${minutes}`;
    }

    // Function format s·ªë ti·ªÅn
    function formatMoney(amount) {
        return new Intl.NumberFormat('vi-VN').format(amount);
    }

    // Function x·ª≠ l√Ω checkbox "Select All"
    $("#selectAll").on('change', function() {
        const isChecked = $(this).is(':checked');
        $('tbody input[type="checkbox"]').each(function() {
            $(this).prop('checked', isChecked);
            const $row = $(this).closest('tr');
            if (isChecked) {
                $row.addClass('selected-row');
            } else {
                $row.removeClass('selected-row');
            }
        });
    });

    // Function x·ª≠ l√Ω checkbox c·ªßa t·ª´ng h√†ng (s·ª≠ d·ª•ng event delegation)
    $(document).on('change', 'tbody input[type="checkbox"]', function() {
        const $row = $(this).closest('tr');
        if ($(this).is(':checked')) {
            $row.addClass('selected-row');
        } else {
            $row.removeClass('selected-row');
        }
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i select all
        const totalCheckboxes = $('tbody input[type="checkbox"]').length;
        const checkedCheckboxes = $('tbody input[type="checkbox"]:checked').length;
        $("#selectAll").prop('checked', totalCheckboxes === checkedCheckboxes);
    });

    // Function x·ª≠ l√Ω n√∫t "Delete Selected"
    $(".delete-selected").on('click', function() {
        const $selectedCheckboxes = $('tbody input[type="checkbox"]:checked');
        
        if ($selectedCheckboxes.length === 0) {
            alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b·∫£n ghi ƒë·ªÉ x√≥a!');
            return;
        }
        
        if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ${$selectedCheckboxes.length} b·∫£n ghi ƒë√£ ch·ªçn?`)) {
            $selectedCheckboxes.each(function() {
                const $row = $(this).closest('tr');
                $row.css({
                    'transition': 'all 0.3s ease',
                    'opacity': '0',
                    'transform': 'translateX(-100%)'
                });
                
                setTimeout(() => {
                    $row.remove();
                }, 300);
            });
            
            // Reset select all checkbox
            $("#selectAll").prop('checked', false);
            
            setTimeout(() => {
                alert('ƒê√£ x√≥a c√°c b·∫£n ghi ƒë√£ ch·ªçn!');
            }, 350);
        }
    });

    // Function x√≥a t·ª´ng h√†ng (s·ª≠ d·ª•ng event delegation)
    $(document).on('click', '.delete-btn', function() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giao d·ªãch n√†y?')) {
            const $row = $(this).closest('tr');
            $row.css({
                'transition': 'all 0.3s ease',
                'opacity': '0',
                'transform': 'translateX(-100%)'
            });
            
            setTimeout(() => {
                $row.remove();
                alert('ƒê√£ x√≥a giao d·ªãch!');
            }, 300);
        }
    });
});
